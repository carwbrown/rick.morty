{"version":3,"sources":["components/InformationCard/index.jsx","hooks/usePagination/index.js","containers/Characters/index.jsx","containers/Locations/index.jsx","containers/Episodes/index.jsx","App.js","serviceWorker.js","index.js"],"names":["InformationCard","props","name","id","image","className","key","src","alt","usePagination","useState","currentPage","setCurrentPage","maxPage","setMaxPage","next","Math","min","prev","max","jumpTo","input","pageToJumpTo","fetchCharacters","a","fetch","characterDataRes","json","getCharacterData","Characters","loading","setLoading","characters","setCharacters","saveTimeout","setSaveTimeout","fetchData","useCallback","fetchedCharacters","results","info","pages","fetchDataPagination","useEffect","onClick","disabled","onChange","event","clearTimeout","newPage","target","value","setTimeout","map","character","fetchLocations","locationsDataRes","getLocationsData","Locations","locations","setLocations","fetchedLocations","location","fetchEpisodes","episodesDataRes","getEpisodesData","Episodes","episodes","setEpisodes","fetchedepisodes","episode","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b04d3d61.chunk.js","sourcesContent":["import React from 'react';\nimport './Card.css';\n\nconst InformationCard = (props) =>{\n\tconst {name, id, image} = props;\n\treturn (\n\t\t<div className=\"CardWrapper\" key={id}>\n\t\t\t<img className=\"CardImage\" src={image} alt={`${name}`} />\n\t\t\t<div>{name}</div>\n\t\t</div>\n\t)\n};\n\nexport default InformationCard;","import {useState} from 'react';\n\nconst usePagination = () => {\n\tconst [currentPage, setCurrentPage] = useState(1);\n\tconst [maxPage, setMaxPage]= useState(1);\n\n\tconst next = () => {\n\t\tsetCurrentPage(Math.min(currentPage + 1, maxPage))\n\t}\n\n\tconst prev = () => {\n\t\tsetCurrentPage(Math.max(currentPage - 1, 1))\n\t}\n\n\tconst jumpTo = (input) => {\n\t\tlet pageToJumpTo = +input\n\t\tif(pageToJumpTo > maxPage) {\n\t\t\tpageToJumpTo = maxPage\n\t\t}\n\t\tif(pageToJumpTo < 1){\n\t\t\tpageToJumpTo = 1;\n\t\t}\n\t\tsetCurrentPage(pageToJumpTo);\n\t}\n\n\treturn { currentPage, maxPage, next, prev, setMaxPage, jumpTo };\n}\n\nexport default usePagination;","import React, { useEffect, useCallback, useState } from 'react';\nimport InformationCard from '../../components/InformationCard';\nimport usePagination from '../../hooks/usePagination'\n\nconst fetchCharacters = async(currentPage) => {\n\tconst characterDataRes  = await fetch(`https://rickandmortyapi.com/api/character/?page=${currentPage}`);\n\tconst getCharacterData = await characterDataRes.json();\n\treturn getCharacterData;\n};\n\nconst Characters = () =>{\n\tconst [loading, setLoading] = useState(false);\n\tconst [characters, setCharacters] = useState([]);\n\tconst [saveTimeout, setSaveTimeout] = useState();\n\n\tconst { currentPage, jumpTo, maxPage, next, prev, setMaxPage } = usePagination();\n\n\tconst fetchData = useCallback(async () => {\n\t\tsetLoading(true);\n\t\tconst fetchedCharacters = await fetchCharacters(currentPage);\n\t\tsetCharacters(fetchedCharacters.results);\n\t\tsetMaxPage(fetchedCharacters.info.pages)\n\t\tif (fetchedCharacters){\n\t\t\tsetLoading(false);\n\t\t}\n\t\t// eslint-disable-next-line\n\t}, [])\n\n\tconst fetchDataPagination = useCallback(async () => {\n\t\tconst fetchedCharacters = await fetchCharacters(currentPage);\n\t\tsetCharacters(fetchedCharacters.results);\n\t}, [currentPage])\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [fetchData])\n\n\tuseEffect(() => {\n\t\tfetchDataPagination();\n\t}, [fetchDataPagination])\n\n\tif (loading){\n\t\treturn <div>Loading Characters...</div>\n\t}\n\n\tconst handleOnChange = (event) => {\n\t\tclearTimeout(saveTimeout);\n\t\tconst newPage = event.target.value;\n\n\t\tsetSaveTimeout(setTimeout(() => {\n\t\t\tjumpTo(newPage);\n\t\t}, 1000))\n\t}\n  return (\n\t\t<div>\n\t\t\t<h2>Characters</h2>\n\t\t\t<button onClick={prev} disabled={currentPage === 1}>Prev</button>\n\t\t\t<button onClick={next} disabled={currentPage === maxPage}>Next</button>\n\t\t\t<div>on page: {currentPage}</div>\n\t\t\t<div>\n\t\t\t\tJump to Page: <input name=\"pageNumber\" onChange={handleOnChange}/>\n\t\t\t</div>\n\t\t\t<div className=\"InformationSection\">\n\t\t\t\t{characters.map(character => (\n\t\t\t\t\t<InformationCard\n\t\t\t\t\t\tkey={character.id}\n\t\t\t\t\t\tid={character.id}\n\t\t\t\t\t\tname={character.name}\n\t\t\t\t\t\timage={character.image}\t\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n  );\n}\n\nexport default Characters;","import React, { useEffect, useCallback, useState } from 'react';\n\nconst fetchLocations = async() => {\n\tconst locationsDataRes  = await fetch(`https://rickandmortyapi.com/api/location/`);\n\tconst getLocationsData = await locationsDataRes.json();\n\treturn getLocationsData.results;\n};\n\nconst Locations = () =>{\n\tconst [loading, setLoading] = useState(true);\n\tconst [locations, setLocations] = useState([]);\n\n\tconst fetchData = useCallback(async () => {\n\t\tsetLoading(true);\n\t\tconst fetchedLocations = await fetchLocations();\n\t\tsetLocations(fetchedLocations);\n\t\tsetLoading(false);\n\t}, [])\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [fetchData])\n\n\tif (loading){\n\t\treturn <div>Loading Locations...</div>\n\t}\n  return (\n\t\t<div>\n\t\t\t<h2>Locations</h2>\n\t\t\t{locations.map(location => (\n\t\t\t\t<div key={location.id}>{location.name}</div>\n\t\t\t))}\n\t\t</div>\n  );\n}\n\nexport default Locations;","import React, { useEffect, useCallback, useState } from 'react';\n\nconst fetchEpisodes = async() => {\n\tconst episodesDataRes  = await fetch(`https://rickandmortyapi.com/api/episode/`);\n\tconst getEpisodesData = await episodesDataRes.json();\n\treturn getEpisodesData.results;\n};\n\nconst Episodes = () =>{\n\tconst [loading, setLoading] = useState(true);\n\tconst [episodes, setEpisodes] = useState([]);\n\n\tconst fetchData = useCallback(async () => {\n\t\tsetLoading(true);\n\t\tconst fetchedepisodes = await fetchEpisodes();\n\t\tsetEpisodes(fetchedepisodes);\n\t\tsetLoading(false);\n\t}, [])\n\n\tuseEffect(() => {\n\t\tfetchData();\n\t}, [fetchData])\n\n\tif (loading){\n\t\treturn <div>Loading Episodes...</div>\n\t}\n  return (\n\t\t<div>\n\t\t\t<h2>Episodes</h2>\n\t\t\t{episodes.map(episode => (\n\t\t\t\t<div key={episode.id}>{episode.name}</div>\n\t\t\t))}\n\t\t</div>\n  );\n}\n\nexport default Episodes;","import React from 'react';\nimport './App.css';\nimport Characters from './containers/Characters';\nimport Locations from './containers/Locations';\nimport Episodes from './containers/Episodes';\n\n/* \n\ttodo\n\tfinish styling cards\n\ttab navigation for different sections\n\tpagination for the different tabbed sections\n\ttry doing some simple stuff with GQL / Apollo\n*/\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\t\t\t\t<h1>Rick and Morty Information</h1>\n        <Characters />\n        <Locations />\n        <Episodes />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}